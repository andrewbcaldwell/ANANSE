#!/usr/bin/env python
# Copyright (c) 2013-2019 Quan Xu <qxuchn@gmail.com>
#
# This module is free software. You can redistribute it and/or modify it under
# the terms of the MIT License, see the file COPYING included with this
# distribution.

import os
import click
import collections

import ananse

# both -h and --help produce the help message
CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


class OrderedGroup(click.Group):
    """
    Sets the order of commands in `ananse --help` as they are found below
    Source: https://stackoverflow.com/questions/47972638/how-can-i-define-the-order-of-click-sub-commands-in-help
    """
    def __init__(self, name=None, commands=None, **attrs):
        super(OrderedGroup, self).__init__(name, commands, **attrs)
        #: the registered subcommands by their exported names.
        self.commands = commands or collections.OrderedDict()

    def list_commands(self, ctx):
        return self.commands


@click.group(context_settings=CONTEXT_SETTINGS, cls=OrderedGroup)
@click.version_option(version=ananse.__version__, prog_name="ANANSE", message="%(prog)s %(version)s")
def cli():
    """
    ANANSE: ANalysis Algorithm for Networks Specified by Enhancers
    """
    pass


@click.command("enhancer", short_help="1: Collect enhancer peaks")
@click.option("-g", "--genome", help="Genome FASTA file")
@click.option("-b", "--bams", help="ATAC-seq, H3K27ac/p300 ChIP-seq bam file(s)")
@click.option("-p", "--peaks", help="ATAC-seq, H3K27ac/p300 ChIP-seq peak file(s) (narrowPeak/broadPeak)")
@click.option("-w", "--width", help="Peak region width", default=200, show_default=True)
@click.option("-s", "--summit",
              help="Column containing the summit (0-based). 9 for narrowPeak, -1 if missing.",
              default=-1, show_default=True)
@click.option("-o", "--output", help="Output filename or directory", default=".", show_default=True)
def enhancer(**kwargs):
    """
    Convert narrow-/broadPeak file to ANANSE enhancer BED,
    the input for ANANSE binding.
    """
    ananse.commands.enhancer(**kwargs)


# @click.command("binding", short_help="2: Infer transcription factor binding sites in enhancer peaks")
# @click.option("-g", "--genome", help="Genome FASTA file")
# #@click.option("-t", "--type", help="Enhancer type: H3K27ac, p300, or ATAC")  # TODO: default was "hg38H3K27ac"!??  Can be automated super easily
# @click.option("-e", "--enhancers",
#               help="Output from ananse enhancer/a BED3+1 file containing a scoring method in the 4th column")
# @click.option("-p", "--pfm",
#               help="Position frequency matrix file for transcription factor binding motifs",
#               default="gimme.vertebrate.v5.0", show_default=True)
# # @click.option("-f", "--tf", help="TF file used in analysis")  # TODO: what is this? not in manual!
# # @click.option("--exclude-tfs", help="Exclude transcription factors from analysis", flag_value=True)  # TODO: include/exclude, what and how?
# @click.option("-n", "--ncpu", help="Number of cores used", default=min(os.cpu_count(), 8), show_default=True)
# @click.option("-o", "--output", help="Output filename or directory", default=".", show_default=True)
# def binding(**kwargs):
#     """
#     Predict TF binding network
#     """
#     ananse.commands.binding(**kwargs)
#
#
# @click.command("network", short_help="3: Build a transcription factor-enhancer network")
# @click.option("-g", "--genome", help="Genome FASTA file")
# @click.option("-a", "--annotation", help="Gene annotation in BED12 format")
# @click.option("-b", "--binding", help="Output from ananse binding")
# @click.option("-e", "--expression", help="Expression scores")  # TODO: what??? RNA-seq TPMs maybe?
# @click.option("-c", "--corrfiles", help="Files with correlation")  # TODO: what??
# @click.option("--select-peaks", help="Peak type(s) to use: enhancers (default), promoters or both", default="enhancers")
# # @click.option("--include-promoters", help="Include promoter peaks (TSS +/- 2kb) in network inference.", flag_value=True)
# # @click.option("--exclude-enhancers", help="Exclude enhancer peaks (TSS +/- 2kb) in network inference.", flag_value=True)
# @click.option("-n", "--ncpu", help="Number of cores used", default=min(os.cpu_count(), 8))
# @click.option("-o", "--output", help="Output location")
# def network():
#     """
#
#     Returns:
#
#     """
#     ananse.commands.network()
#
#
# @click.command("influence", short_help="4: Infer key transcription factors between two samples")
# @click.option("-s", "--source", help="ANANSE network output for the source sample(s)")
# @click.option("-t", "--target", help="ANANSE network output for the target sample(s)")
# @click.option("-e", "--expression", help="Expression scores in source sample")  # TODO: TPMs?
# @click.option("-d", "--DEgenes", help="DE genes between the source and target samples")  # TODO: format?
# @click.option("-i", "--edges", help="Number of edges used (def: 100000)", default=100000)
# @click.option("-p", "--plot", help="Create influence score plot?", flag_value=True)
# @click.option("-n", "--ncpu", help="Number of cores used", default=min(os.cpu_count(), 8))
# @click.option("-o", "--output", help="Output location")
# def influence():
#     """
#
#     Returns:
#
#     """
#     ananse.commands.influence()


cli.add_command(enhancer)
# cli.add_command(binding)
# cli.add_command(network)
# cli.add_command(influence)

if __name__ == "__main__":
    cli()
